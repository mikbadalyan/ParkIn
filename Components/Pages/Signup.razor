@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using ParkIn.Data
@inject ApplicationDbContext DbContext
@inject EmailService EmailService
@inject ILogger<Signup> Logger
@inject NavigationManager NavigationManager
@inject TokenService TokenService
@rendermode InteractiveServer
@page "/signup"
@layout Components.Layout.SignupLayout

<PageTitle>Sign Up</PageTitle>
<div class="signup-container">
    <h2>Sign Up</h2>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="@user" OnValidSubmit="HandleValidSubmit" FormName="signupForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group-half">
            <div class="form-group">
                <InputText id="firstName" @bind-Value="user.FirstName" class="form-control" placeholder="First Name" />
                <ValidationMessage For="@(() => user.FirstName)" />
            </div>

            <div class="form-group">
                <InputText id="lastName" @bind-Value="user.LastName" class="form-control" placeholder="Last Name" />
                <ValidationMessage For="@(() => user.LastName)" />
            </div>
        </div>

        <div class="form-group">
            <InputText id="email" @bind-Value="user.Email" type="email" class="form-control" placeholder="Email" />
            <ValidationMessage For="@(() => user.Email)" />
        </div>

        <div class="form-group">
            <InputText id="username" @bind-Value="user.Username" class="form-control" placeholder="Username" />
            <ValidationMessage For="@(() => user.Username)" />
        </div>

        <div class="form-group">
            <InputText id="password" @bind-Value="user.Password" type="password" class="form-control" placeholder="Password" />
            <ValidationMessage For="@(() => user.Password)" />
        </div>

        <div class="form-group">
            <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" type="password" class="form-control" placeholder="Confirm Password" />
            <ValidationMessage For="@(() => user.ConfirmPassword)" />
        </div>

        <div class="form-group">
            <InputText id="phoneNumber" @bind-Value="user.PhoneNumber" class="form-control" placeholder="Phone Number" />
            <ValidationMessage For="@(() => user.PhoneNumber)" />
        </div>

        <button type="submit" class="btn btn-primary">Sign Up</button>
    </EditForm>
</div>


<!-- Modal for verification code -->
@if (showVerificationModal)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Enter Verification Code</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <InputText id="verificationCode" @bind-Value="verificationCode" class="form-control" placeholder="Verification Code" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="VerifyCode">Verify</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserModel user = new UserModel();
    private string errorMessage = string.Empty;
    private bool showVerificationModal = false;
    private string verificationCode = string.Empty;
    private string generatedVerificationCode = string.Empty;

    private async Task HandleValidSubmit()
    {
        try
        {
            // Check if the email already exists
            var existingUserByEmail = await DbContext.Usersigns.FirstOrDefaultAsync(u => u.Email == user.Email);

            if (existingUserByEmail != null)
            {
                errorMessage = "An account with this email already exists.";
                return;
            }

            // Check if the username already exists
            var existingUserByUsername = await DbContext.Usersigns.FirstOrDefaultAsync(u => u.Username == user.Username);

            if (existingUserByUsername != null)
            {
                errorMessage = "An account with this username already exists.";
                return;
            }

            // Check if the password and confirm password match
            if (user.Password != user.ConfirmPassword)
            {
                errorMessage = "Passwords do not match.";
                return;
            }

            var passwordHasher = new PasswordHasher<UserModel>();
            var hashedPassword = passwordHasher.HashPassword(user, user.Password);

            generatedVerificationCode = GenerateVerificationCode();
            var pin = GeneratePIN();

            var newUser = new UserSign
                {
                    FirstName = user.FirstName,
                    LastName = user.LastName,
                    Email = user.Email,
                    Username = user.Username,
                    Password = hashedPassword,
                    PhoneNumber = user.PhoneNumber,
                    PIN = pin,
                    VerificationCode = generatedVerificationCode,
                    IsVerified = false
                };

            DbContext.Usersigns.Add(newUser);
            await DbContext.SaveChangesAsync();

            // Send verification email
            await EmailService.SendEmailAsync(user.Email, user.FirstName, user.LastName, user.Username, pin.ToString(), generatedVerificationCode);

            Logger.LogInformation("Verification email sent to {Email}", user.Email);

            // Show verification modal
            showVerificationModal = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during signup process");
            errorMessage = "An error occurred while processing your request. Please try again later.";
        }
    }

    private async Task VerifyCode()
    {
        var user = await DbContext.Usersigns.FirstOrDefaultAsync(u => u.VerificationCode == verificationCode);
        if (user != null)
        {
            user.IsVerified = true;
            await DbContext.SaveChangesAsync();
            showVerificationModal = false;
            var token = TokenService.EncryptToken(user.Id.ToString());
            NavigationManager.NavigateTo($"/account/{token}");
        }
        else
        {
            errorMessage = "Invalid verification code.";
        }
    }

    private void CloseModal()
    {
        showVerificationModal = false;
    }

    private string GenerateVerificationCode()
    {
        return new Random().Next(100000, 999999).ToString();
    }

    private int GeneratePIN()
    {
        return new Random().Next(1000, 9999);
    }

    public class UserModel
    {
        [Required(ErrorMessage = "First Name is required.")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last Name is required.")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long.")]
        [StrongPassword]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Phone Number is required.")]
        [Phone(ErrorMessage = "Invalid phone number.")]
        public string PhoneNumber { get; set; } = string.Empty;

        public string VerificationCode { get; set; } = string.Empty;
        public bool IsVerified { get; set; } = false;
    }

    public class StrongPasswordAttribute : ValidationAttribute
    {
        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            var password = value as string;
            if (string.IsNullOrEmpty(password))
            {
                return new ValidationResult("Password is required.");
            }

            if (password.Length < 8)
            {
                return new ValidationResult("Password must contain at least 8 characters.");
            }

            if (!password.Any(char.IsDigit))
            {
                return new ValidationResult("Password must contain at least one number.");
            }

            if (!password.Any(char.IsUpper))
            {
                return new ValidationResult("Password must contain at least one uppercase letter.");
            }

            if (!password.Any(char.IsLower))
            {
                return new ValidationResult("Password must contain at least one lowercase letter.");
            }

            return ValidationResult.Success;
        }
    }
}

