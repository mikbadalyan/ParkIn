@page "/reservation/{token}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using ParkIn.Data
@inject NavigationManager NavigationManager
@inject ILogger<Reservation> Logger
@inject Data.ApplicationDbContext DbContext
@layout Components.Layout.Accountlayout
@rendermode InteractiveServer

<PageTitle>Reservation</PageTitle>

<div class="reservation-container">
    <h3>RESERVE A SPOT | AVAILABLE TIMETABLE</h3>

    @if (!string.IsNullOrEmpty(token))

    {
        <p></p> <!-- Display the token -->
    }

    else

    {
        <p>No token provided.</p>
    }

    <EditForm Model="@reservationModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <div class="scrollable-picker-container">
                <div class="scrollable-picker">
                    <div class="picker-header">Date</div>
                    @foreach (var date in AvailableDates)

                    {
                        <div class="@GetDateClass(date)" @onclick="() => SelectDate(date)">@date.ToString("MMM dd")</div>
                    }
                </div>
                <div class="scrollable-picker">
                    <div class="picker-header">Entrance</div>
                    @foreach (var time in AvailableTimes)

                    {
                        <div class="@GetTimeClass(time, true)" @onclick="() => SelectTime(time)">@time</div>
                    }
                </div>
                <div class="scrollable-picker">
                    <div class="picker-header">Exit</div>
                    @foreach (var time in AvailableEndTimes)

                    {
                        <div class="@GetTimeClass(time, false)" @onclick="() => SelectEndTime(time)">@time</div>
                    }
                </div>
            </div>
            <ValidationMessage For="@(() => reservationModel.Date)" />
            <ValidationMessage For="@(() => reservationModel.Time)" />
            <ValidationMessage For="@(() => reservationModel.EndTime)" />
        </div>

        <div class="button-container">
            <button type="submit" class="btn btn-primary">Reserve</button>
        </div>
    </EditForm>

    @if (reservationModel.Date != default && !string.IsNullOrEmpty(reservationModel.Time))

    {
        <div class="selected-date-time">
            <p>Selected Date: @reservationModel.Date.ToString("MMMM dd, yyyy")</p>
            <p>Selected Time: @reservationModel.Time</p>
        </div>
    }
</div>
<style>
    .reservation-container {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        max-width: 800px;
        margin: auto;
        color: #333;
    }

    h3 {
        text-align: center;
        color: #28a745; /* Changed to green */
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .scrollable-picker-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .scrollable-picker {
        display: flex;
        flex-direction: column;
        align-items: center;
        overflow-y: scroll;
        height: 300px;
        width: 100px;
        margin: 10px;
        scrollbar-width: thin;
        -webkit-overflow-scrolling: touch;
        position: relative;
        background-color: #333;
        color: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .picker-header {
        font-weight: bold;
        margin-bottom: 10px;
        color: #28a745; /* Changed to green */
    }

    .scrollable-picker div {
        padding: 10px;
        text-align: center;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .scrollable-picker div:hover {
            background-color: #555;
        }

        .scrollable-picker div.selected {
            font-weight: bold;
            background-color: #28a745; /* Changed to green */
            color: white;
        }

    .scrollable-picker::-webkit-scrollbar {
        width: 8px;
    }

    .scrollable-picker::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .scrollable-picker::-webkit-scrollbar-thumb {
        background: #888;
        border-radius: 10px;
    }

        .scrollable-picker::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

    .selected-date-time {
        background-color: #28a745; /* Green background */
        padding: 10px;
        border-radius: 5px;
        margin-top: 20px;
        text-align: center;
        color: white; /* White text */
    }

        .selected-date-time p {
            margin: 0;
            color: white; /* White text */
        }

    .button-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    button[type="submit"] {
        background-color: #28a745; /* Green color */
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button[type="submit"]:hover {
            background-color: #218838; /* Changed to darker green */
        }

</style>
@code {
    [Parameter]

    public string? token { get; set; }



    private ReservationModel reservationModel = new ReservationModel();

    private List<DateTime> AvailableDates = new List<DateTime>();

    private List<string> AvailableTimes = new List<string>();

    private List<string> AvailableEndTimes = new List<string>();

    private List<Reserve> existingReservations = new List<Reserve>();



    protected override async Task OnInitializedAsync()

    {

        await FetchExistingReservations();

        GenerateAvailableDates();

    }



    private async Task FetchExistingReservations()

    {

        existingReservations = await DbContext.Reserves.ToListAsync();

    }



    private void GenerateAvailableDates()

    {

        var startDate = DateTime.Now;

        for (int i = 0; i < 30; i++)

        {

            AvailableDates.Add(startDate.AddDays(i));

        }

    }



    private void GenerateAvailableTimes()

    {

        var startTime = new TimeSpan(0, 0, 0); // Start at 12:00 AM

        var endTime = new TimeSpan(23, 55, 0); // End at 11:55 PM

        var interval = new TimeSpan(0, 15, 0); // 15-minute intervals



        AvailableTimes.Clear();



        for (var time = startTime; time <= endTime; time += interval)

        {

            if (!IsTimeWithinExistingReservations(time, reservationModel.Date))

            {

                AvailableTimes.Add(time.ToString(@"hh\:mm"));

            }

        }

    }



    private bool IsTimeWithinExistingReservations(TimeSpan time, DateTime date)

    {

        int reservationCount = 0;

        foreach (var reservation in existingReservations)

        {

            if (reservation.ReservationDate.Date == date.Date &&

                time >= reservation.StartTime && time <= reservation.EndTime)

            {

                reservationCount++;

                if (reservationCount >= 2)

                {

                    return true;

                }

            }

        }

        return false;

    }



    private void SelectDate(DateTime date)

    {

        reservationModel.Date = date;

        GenerateAvailableTimes();

    }



    private void SelectTime(string time)

    {

        reservationModel.Time = time;

        GenerateAvailableEndTimes();

    }



    private void GenerateAvailableEndTimes()

    {

        var selectedStartTime = TimeSpan.Parse(reservationModel.Time);

        AvailableEndTimes.Clear();



        var endTime = new TimeSpan(23, 55, 0); // End at 11:55 PM

        var interval = new TimeSpan(0, 15, 0); // 15-minute intervals



        for (var time = selectedStartTime + interval; time <= endTime; time += interval)

        {

            if (IsTimeWithinExistingReservations(time, reservationModel.Date))

            {

                break;

            }

            AvailableEndTimes.Add(time.ToString(@"hh\:mm"));

        }

    }



    private void SelectEndTime(string time)

    {

        reservationModel.EndTime = time;

    }



    private string GetDateClass(DateTime date)

    {

        return date == reservationModel.Date ? "selected" : string.Empty;

    }



    private string GetTimeClass(string time, bool isStartTime)

    {

        if (isStartTime)

        {

            return time == reservationModel.Time ? "selected" : string.Empty;

        }

        else

        {

            return time == reservationModel.EndTime ? "selected" : string.Empty;

        }

    }



    private async Task HandleValidSubmit()

    {

        try

        {

            var userId = 1; // Replace with actual user ID retrieval logic



            var reservation = new Reserve

                {

                    UserId = userId,

                    ReservationDate = reservationModel.Date,

                    StartTime = TimeSpan.Parse(reservationModel.Time),

                    EndTime = TimeSpan.Parse(reservationModel.EndTime),

                    CreatedAt = DateTime.Now

                };



            DbContext.Reserves.Add(reservation);

            await DbContext.SaveChangesAsync();



            Logger.LogInformation("Reservation made for {Date} from {Time} to {EndTime}", reservationModel.Date, reservationModel.Time, reservationModel.EndTime);

            NavigationManager.NavigateTo("/reservationsuccess");

        }

        catch (Exception ex)

        {

            Logger.LogError(ex, "Error making reservation");

        }

    }



    public class ReservationModel

    {

        [Required(ErrorMessage = "Date is required.")]

        public DateTime Date { get; set; }



        [Required(ErrorMessage = "Start time is required.")]

        public string Time { get; set; } = string.Empty;



        [Required(ErrorMessage = "End time is required.")]

        public string EndTime { get; set; } = string.Empty;

    }
}
