@page "/account/{token}"
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using QRCoder
@inject Data.ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject TokenService TokenService
@inject ILogger<Account> Logger
@inject IWebHostEnvironment WebHostEnvironment
@layout Components.Layout.Accountlayout
@rendermode InteractiveServer
<PageTitle>User Account</PageTitle>

@if (user == null)
{
    <p class="text-white"><em>Loading...</em></p>
}
else
{
    <div class="account-container text-white">
        <div class="user-info-container">
            <div class="user-info">
                <h2>Welcome, @user.FirstName @user.LastName</h2>
                <p><strong>Email:</strong> @user.Email</p>
                <p><strong>Username:</strong> @user.Username</p>
                <p><strong>Phone Number:</strong> @user.PhoneNumber</p>
                <p><strong>PIN:</strong> @user.PIN</p>
                @if (!string.IsNullOrEmpty(user.CarBrand))
                {
                    <p><strong>Car Brand:</strong> @user.CarBrand</p>
                }
                @if (!string.IsNullOrEmpty(user.PlateNumber))
                {
                    <p><strong>Plate Number:</strong> @user.PlateNumber</p>
                }
            </div>

            <div class="qr-code-container">
                @if (!string.IsNullOrEmpty(qrCodePng))
                {
                    <img src="data:image/png;base64,@qrCodePng" alt="QR Code" class="qr-code" />
                }
                <p>Please, scan QR code at the boom barrier of UFAR</p>
            </div>
        </div>

        <div class="car-details-form">
            <h3>Add Car Details</h3>
            <EditForm Model="@carDetails" OnValidSubmit="AddCarDetails">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="carBrand">Car Brand</label>
                    <InputSelect id="carBrand" @bind-Value="carDetails.CarBrand" class="form-control">
                        <option value="">Select Car Brand</option>
                        <option value="Toyota">Toyota</option>
                        <option value="BMW">BMW</option>
                        <option value="Mercedes">Mercedes</option>
                        <option value="Audi">Audi</option>
                        <option value="Ford">Ford</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => carDetails.CarBrand)" />
                </div>

                <div class="form-group">
                    <label for="plateNumber">Plate Number</label>
                    <InputText id="plateNumber" @bind-Value="carDetails.PlateNumber" class="form-control" />
                    <ValidationMessage For="@(() => carDetails.PlateNumber)" />
                </div>

                <button type="submit" class="btn btn-primary">Add New Car</button>
            </EditForm>

            @if (carDetailsAdded)
            {
                <div class="car-details">
                    <h3>Car Details</h3>
                    <p><strong>Car Brand:</strong> @carDetails.CarBrand</p>
                    <p><strong>Plate Number:</strong> @carDetails.PlateNumber</p>
                </div>
            }
        </div>

        <nav>
            <ul>
                <li><a @onclick="NavigateToReservation">Make a Reservation</a></li>
            </ul>
        </nav>
    </div>
}

@code {
    [Parameter]
    public string? token { get; set; }

    private UserSign? user;
    private CarDetailsModel carDetails = new CarDetailsModel();
    private bool carDetailsAdded = false;
    private string? qrCodePng;  // QR code in Base64 to display

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("Decrypting token: {Token}", token);
            var userId = int.Parse(TokenService.DecryptToken(token));
            Logger.LogInformation("Decrypted user ID: {UserId}", userId);
            user = await DbContext.Usersigns.FirstOrDefaultAsync(u => u.Id == userId);
            if (user == null)
            {
                Logger.LogWarning("User not found for ID: {UserId}", userId);
                NavigationManager.NavigateTo("/signup");
            }
            else
            {
                await GenerateQrCode();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during token decryption or user retrieval");
            NavigationManager.NavigateTo("/signup");
        }
    }

    private async Task AddCarDetails()
    {
        if (!IsValidPlateNumber(carDetails.PlateNumber))
        {
            Logger.LogWarning("Invalid Plate Number format: {PlateNumber}", carDetails.PlateNumber);
            return;
        }

        if (user != null)
        {
            user.CarBrand = carDetails.CarBrand;
            user.PlateNumber = carDetails.PlateNumber;

            DbContext.Usersigns.Update(user);
            await DbContext.SaveChangesAsync();

            carDetailsAdded = true;
        }
    }

    private async Task GenerateQrCode()
    {
        if (user == null)
        {
            throw new InvalidOperationException("User not found.");
        }

        var username = user.Username;
        var userId = user.Id.ToString();

        // Combine username and ID into a unique data string
        var data = $"{username}:{userId}";

        using var qrGenerator = new QRCodeGenerator();
        var qrCodeData = qrGenerator.CreateQrCode(data, QRCodeGenerator.ECCLevel.Q);
        using var qrCode = new PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(20);

        qrCodePng = Convert.ToBase64String(qrCodeBytes);
    }

    private bool IsValidPlateNumber(string plateNumber)
    {
        // Add your plate number validation logic here
        return !string.IsNullOrEmpty(plateNumber);
    }

    private void NavigateToReservation()
    {
        NavigationManager.NavigateTo($"/reservation/{token}");
    }

    private class CarDetailsModel
    {
        [Required]
        public string CarBrand { get; set; } = string.Empty;

        [Required]
        public string PlateNumber { get; set; } = string.Empty;
    }
}
